<!DOCTYPE html>
   <html lang="en">
   <head>
     <meta charset="UTF-8" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>ProxyMe</title>
     <link rel="icon" href="/static/favicon.ico"> 
     <style>
       body {
         margin: 0;
         font-family: 'Segoe UI', Roboto, Oxygen, sans-serif;
         background: #1a1a1a;
         min-height: 100vh;
         display: flex;
         justify-content: center;
         align-items: center;
         padding: 20px;
         overflow: hidden;
         color: #e0e0e0;
       }

       .chat-container {
         width: 100%;
         max-width: 900px;
         background: #2c2c2c;
         border-radius: 20px;
         box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
         display: flex;
         flex-direction: column;
         height: 90vh;
         overflow: hidden;
         transition: transform 0.3s ease, box-shadow 0.3s ease;
       }

       .chat-container:hover {
         transform: translateY(-5px);
         box-shadow: 0 15px 40px rgba(0, 0, 0, 0.7);
       }

       .header {
         background: #333;
         color: #00ffcc;
         padding: 15px 25px;
         border-top-left-radius: 20px;
         border-top-right-radius: 20px;
         display: flex;
         align-items: center;
         gap: 15px;
         font-size: 1.8rem;
         font-weight: 600;
         text-transform: uppercase;
       }

       .header svg {
         fill: #00ffcc;
         width: 30px;
         height: 30px;
         transition: transform 0.3s ease;
       }

       .header:hover svg {
         transform: rotate(360deg);
       }

       .logo {
         width: 40px;
         height: 40px;
         background: #00ffcc;
         border-radius: 50%;
         display: flex;
         align-items: center;
         justify-content: center;
       }

       .chat-window {
         flex: 1;
         padding: 25px;
         overflow-y: auto;
         background: #1a1a1a;
         scrollbar-width: thin;
         scrollbar-color: #00ffcc #333;
       }

       .chat-window::-webkit-scrollbar {
         width: 8px;
       }

       .chat-window::-webkit-scrollbar-track {
         background: #333;
       }

       .chat-window::-webkit-scrollbar-thumb {
         background: #00ffcc;
         border-radius: 4px;
       }

       .message {
         margin-bottom: 20px;
         display: flex;
         animation: fadeIn 0.5s ease;
       }

       .user-message { justify-content: flex-end; }
       .bot-message { justify-content: flex-start; }

       .bubble {
         max-width: 75%;
         padding: 15px 20px;
         border-radius: 15px;
         box-shadow: 0 5px 15px rgba(0, 255, 204, 0.1);
         transition: transform 0.2s ease, background 0.3s ease;
       }

       .user-bubble {
         background: #00ffcc;
         color: #1a1a1a;
       }

       .user-bubble:hover {
         transform: scale(1.02);
       }

       .bot-bubble {
         background: #333;
         color: #e0e0e0;
       }

       .bot-bubble:hover {
         transform: scale(1.02);
       }

       .loading {
         display: flex;
         justify-content: flex-start;
         margin-bottom: 20px;
       }

       .dot {
         width: 12px;
         height: 12px;
         background: #00ffcc;
         border-radius: 50%;
         margin: 0 6px;
         animation: bounce 0.6s infinite;
       }

       .dot:nth-child(2) { animation-delay: 0.2s; }
       .dot:nth-child(3) { animation-delay: 0.4s; }

       @keyframes bounce {
         0%, 100% { transform: translateY(0); }
         50% { transform: translateY(-12px); }
       }

       @keyframes fadeIn {
         from { opacity: 0; transform: translateY(10px); }
         to { opacity: 1; transform: translateY(0); }
       }

       .input-area {
         padding: 20px;
         border-top: 1px solid #00ffcc;
         background: #2c2c2c;
         border-bottom-left-radius: 20px;
         border-bottom-right-radius: 20px;
       }

       form {
         display: flex;
         gap: 15px;
       }

       textarea {
         flex: 1;
         padding: 15px;
         border: 2px solid #00ffcc;
         border-radius: 12px;
         resize: none;
         font-size: 1.1rem;
         background: #1a1a1a;
         color: #e0e0e0;
         transition: border-color 0.3s ease, box-shadow 0.3s ease;
       }

       textarea:focus {
         border-color: #00ff99;
         box-shadow: 0 0 15px rgba(0, 255, 153, 0.5);
         outline: none;
       }

       button {
         padding: 15px 25px;
         background: #00ffcc;
         color: #1a1a1a;
         border: none;
         border-radius: 12px;
         cursor: pointer;
         font-weight: 600;
         transition: background 0.3s ease, transform 0.2s ease;
       }

       button:hover {
         background: #00ff99;
         transform: scale(1.05);
       }

       @media (max-width: 640px) {
         .chat-container {
           max-width: 100%;
           height: 95vh;
         }
         .bubble {
           max-width: 85%;
         }
         .header {
           font-size: 1.5rem;
         }
       }
     </style>
   </head>
   <body>
     <div class="chat-container">
       <div class="header">
         <div class="logo">
           <svg viewBox="0 0 100 100" width="30" height="30" fill="#1a1a1a">
             <circle cx="50" cy="50" r="40" />
             <path d="M50 20 L70 50 L50 80 L30 50 Z" />
           </svg>
         </div>
         AlterMe
       </div>
       <div class="chat-window" id="chatWindow"></div>
       <div class="input-area">
         <form id="chatForm">
           <textarea id="userInput" placeholder="Type your message..." rows="1"></textarea>
           <button type="submit">Send</button>
         </form>
       </div>
     </div>

     <script>
       const chatWindow = document.getElementById('chatWindow');
       const userInput = document.getElementById('userInput');
       const chatForm = document.getElementById('chatForm');
       const apiUrl = '{{ apiUrl }}'; // Jinja2 variable for API URL

       let messages = [
         { text: "What can I help you with today? ", isUser: false }
       ];

       function addMessage(text, isUser) {
         const messageDiv = document.createElement('div');
         messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
         const bubbleDiv = document.createElement('div');
         bubbleDiv.className = `bubble ${isUser ? 'user-bubble' : 'bot-bubble'}`;
         bubbleDiv.textContent = text;
         messageDiv.appendChild(bubbleDiv);
         chatWindow.appendChild(messageDiv);
         chatWindow.scrollTop = chatWindow.scrollHeight;
       }

       function showLoading() {
         const loadingDiv = document.createElement('div');
         loadingDiv.className = 'loading';
         for (let i = 0; i < 3; i++) {
           const dot = document.createElement('div');
           dot.className = 'dot';
           loadingDiv.appendChild(dot);
         }
         chatWindow.appendChild(loadingDiv);
         chatWindow.scrollTop = chatWindow.scrollHeight;
       }

       function clearLoading() {
         const loading = chatWindow.querySelector('.loading');
         if (loading) loading.remove();
       }

       chatForm.addEventListener('submit', async (e) => {
         e.preventDefault();
         const input = userInput.value.trim();
         if (!input) return;

         addMessage(input, true);
         userInput.value = '';
         userInput.focus();
         showLoading();

         try {
           const response = await fetch(apiUrl, {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ input })
           });
           const data = await response.json();
           clearLoading();
           const cleaned = data.response.replace(/^.*?(?=Hey there|Hello|Certainly)/s, '');
           addMessage(cleaned || "Oops, something went wrong! Letâ€™s try again. ðŸ˜…", false);
         } catch (error) {
           clearLoading();
           addMessage('Error: Try again later. Sorry about that! ðŸ˜”', false);
           console.error('Fetch error:', error);
         }
       });

       messages.forEach(msg => addMessage(msg.text, msg.isUser));
     </script>
   </body>
   </html>